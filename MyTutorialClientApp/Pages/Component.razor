@page "/component"


<div class="color">
    <h1 class="h1-header">Blazor Components</h1>
</div>

<br />

<div>
    <a href="/overview" class="previous round">&#8249;</a>
    <a href="/data-binding" class="next round">&#8250;</a>
</div>

<hr />

<div class="row">
    <div class="col-sm-7 col-lg-7 col-md-7">


        <p>
            Blazor apps are based on components. A component in Blazor is an element of UI, such as a page, dialog, or data entry form.
        </p>

        <p>
            A component includes HTML markup and the processing logic required to inject data or respond to UI events. A component's name must start with an uppercase character. For example, MyCoolComponent.razor is valid, and myCoolComponent.razor is invalid.
        </p>

        <p>
            The UI for a component is defined using HTML. Dynamic rendering logic (for example, loops, conditionals, expressions) is added using an embedded C# syntax called Razor. When an app is compiled, the HTML markup and C# rendering logic are converted into a component class. The name of the generated class matches the name of the file.
        </p>


        <p>
            Components are ordinary C# classes and can be placed anywhere within a project. Components that produce webpages usually reside in the Pages folder. Non-page components are frequently placed in the Shared folder
        </p>

    </div>
    <div class="col-sm-5 col-lg-5 col-md-5">
        <p>
            <img src="/image/CounterComponent.png" role="presentation" class="img-fluid img-fluid-center img-bordered" height="300" style="border:thick" />
            <img src="/image/CounterComponentGif.gif" role="presentation" class="img-fluid img-fluid-center img-bordered" height="300" style="border:thick" />
            @*<img src="https://dotnet.microsoft.com//static/images/screenshot-blazor-sample.png?v=I8ehzNLqsOCsVxsF3R-AiNMUf8tsQUZcaO7bZ0JW_go" alt="Blazor WebAssembly runs .NET code in the browser with WebAssembly." role="presentation" class="img-fluid img-fluid-center img-bordered" width="900" height="300" style="border:thick">*@
        </p>
    </div>
</div>



<div class="row">
    <div class="col-sm-12 col-lg-12 col-md-12">


        @*<p>
                Blazor apps are based on components. A component in Blazor is an element of UI, such as a page, dialog, or data entry form.
            </p>*@

        @*<p>
                A component includes HTML markup and the processing logic required to inject data or respond to UI events. A component's name must start with an uppercase character. For example, MyCoolComponent.razor is valid, and myCoolComponent.razor is invalid.
            </p>*@



        @*<p>
                The UI for a component is defined using HTML. Dynamic rendering logic (for example, loops, conditionals, expressions) is added using an embedded C# syntax called Razor. When an app is compiled, the HTML markup and C# rendering logic are converted into a component class. The name of the generated class matches the name of the file.
            </p>*@

        <p>
            Components are implemented in Razor component files (.razor) using a combination of C# and HTML markup. Components in Blazor are formally referred to as Razor components.
        </p>

        <p>
            Members of the component class are defined in an @@code block. In the @@code block, component state (properties, fields) is specified with methods for event handling or for defining other component logic. More than one @@code block is permissible.
        </p>

        @*<p>
                Components are ordinary C# classes and can be placed anywhere within a project. Components that produce webpages usually reside in the Pages folder. Non-page components are frequently placed in the Shared folder
            </p>*@


    </div>

</div>

<div class="row">


    <div class="col-sm-12 col-lg-12 col-md-12">
        <p>
            <img src="image/BlazorConponent.png" alt="Blazor WebAssembly runs .NET code in the browser with WebAssembly." data-linktype="relative-path" style="margin-left: 130px;">
        </p>
    </div>

</div>


<p>
    Components are .NET classes built into .NET assemblies that:

    <ul>
        <li> Define flexible UI rendering logic.</li>
        <li> Handle user events.</li>
        <li> Can be nested and reused.</li>
        <li> Can be shared and distributed as Razor class libraries or NuGet packages or shared among projects.</li>
    </ul>
</p>


<br />


<div class="row">
    <div class="col-sm-12 col-lg-12 col-md-12">
        <p>
            <img src="image/ComponentAddWizard.png" alt="Blazor WebAssembly runs .NET code in the browser with WebAssembly." data-linktype="relative-path">
        </p>
    </div>
</div>


<br />

<ul>
    <li>
        Use components
    </li>
    <li>
        Component parameters
    </li>
    <li>
        Child content
    </li>


</ul>


<hr />

<div>
    <a href="/overview" class="previous round">&#8249;</a>
    <a href="/databinding" class="next round">&#8250;</a>
</div>

<hr />

<h5>Summary</h5>

<div class="alert alert-secondary mt-4" role="alert">

    <p>
        <ul style="list-style-type: none;">
            <li> <span class="oi oi-pencil mr-2" aria-hidden="true"></span> A component is an element of UI, such as a page, dialog, or data entry form.</li>
            <li> <span class="oi oi-pencil mr-2" aria-hidden="true"></span> Components are implemented in Razor component files (.razor) using a combination of C# and HTML markup.</li>
            <li> <span class="oi oi-pencil mr-2" aria-hidden="true"></span> Components in blazor are formally referred to as Razor components.</li>
            <li> <span class="oi oi-pencil mr-2" aria-hidden="true"></span> Components can be shared and distributed among other projects.</li>
            <li> <span class="oi oi-pencil mr-2" aria-hidden="true"></span> ASP.net MVC offer Easy and frictionless testability with Full control over your HTML &amp; URLs</li>
        </ul>
    </p>

</div>




@code {

}


@*Blazor apps are composed of reusable web UI components implemented using C#, HTML, and CSS.*@


<style>
</style>
